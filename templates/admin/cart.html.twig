{% extends 'base.html.twig' %}

{% block content %}
<div class="row">
                                             <div class="col-md-12">
                                                <div class="white_shd full margin_bottom_30" style="margin-top: 15px;">
                                                   <div class="full graph_head">
                                                      <div class="heading1 margin_0">
                                                         {% if clientname is defined %}
                                                         <h2><i class="fa fa-shopping-cart"
                                                               style="color: #ff5722;font-size: 30px;margin-right: 10px;"
                                                               data-code-client="{{ client }}"></i> Panier de
                                                            {{clientname|lower|capitalize }} </h2>
                                                      </div>
                                                      {% else %}
                                                      <h2>Panier</h2>
                                                      {% endif %}
                                                   </div>
                                                   
                                                </div>
                                                
                                          </div>

                                          <div class="table-container">
                                                            <table class="table table-custom">
                                                               <thead class="thead-custom">
                                                                  <tr>
                                                                     <th>Article</th>
                                                                     <th>Qte</th>
                                                                      <th>Prix Unitaire</th>
                                                                     <th>Prix Total</th>
                                                                     <th>Actions</th>
                                                                  </tr>
                                                               </thead>
                                                               <tbody>
                                                                  {% for item in data|filter(item => not item.gift and
                                                                  not item.exchange) %} <tr
                                                                     data-code="{{ item.article.code }}"
                                                                     data-nbr-gratuit="{{ item.nbrGratuit }}">
                                                                     <td class="text-left">{{ item.article.libelle }}
                                                                     </td>
                                                                     <td>
                                                                        <div
                                                                           style="display: flex; align-items: center;">
                                                                           <div class="quantity-container">
                                                                              <button
                                                                                 class="btn btn-danger minus-btn custom-minus-btn d-flex align-items-center justify-content-center"
                                                                                 data-code="{{ item.article.code }}">
                                                                                 <i class="fa fa-minus-square"></i>
                                                                              </button>
                                                                              <input type="number"
                                                                                 value="{{ item.quantity }}"
                                                                                 class="quantity-input form-control d-inline mx-1"
                                                                                 style="width: 70px; text-align: center;"
                                                                                 data-code="{{ item.article.code }}"
                                                                                 required />
                                                                              <button
                                                                                 class="btn cur-p btn-warning add-to-cart plus-btn d-flex align-items-center justify-content-center custom-plus-btn"
                                                                                 data-code="{{ item.article.code }}">
                                                                                 <i class="fa fa-plus-square"></i>
                                                                              </button>
                                                                           </div>
                                                                           {# {% if item.nbrGratuit >0 %}
                                                                      <span class="badge badge-success ml-2">
                                                                              +{{ item.nbrGratuit }} gratuit
                                                                           </span> {% endif %} #}
                                                                        </div>
                                                         </div>
                                                         </td>
                                                        
                                                         <td class="price text-center"
                                                            data-code="{{ item.article.code }}">
                                                            {% if item.newPrice != 0 and item.newPrice != item.price %}
                                                            <span class="old-price"
                                                               style="text-decoration: line-through;">
                                                               {{ item.price | number_format(3, '.', ',') }} DT
                                                            </span>
                                                            <span class="new-price" style="color: red;"
                                                               data-code="{{ item.article.code }}">
                                                               {{ item.newPrice | number_format(3, '.', ',') }} DT
                                                            </span>
                                                            {% else %}
                                                            {{ item.price | number_format(3, '.', ',') }} DT
                                                            {% endif %}
                                                         </td>
                                                         <td class="total-price text-center"
                                                            data-code="{{ item.article.code }}">{{
                                                            item.priceTotal | number_format(3, '.', ',') }}
                                                            DT</td>
                                                         <td class="text-center">
                                                            <button class="btn cur-p btn-danger delete-item-btn"
                                                               data-code="{{ item.article.code }}" data-is-gift="false"
                                                               data-is-exchange="false">
                                                               <i class="fa fa-trash"></i>
                                                            </button>
                                                         </td>
                                                         </tr>
                                                         {% else %}
                                                         <tr>
                                                            <td colspan="7" class="text-center">Votre panier
                                                               est vide.</td>
                                                         </tr>
                                                         {% endfor %}
                                                         </tbody>

                                                         </table>
                                                      </div>
                                       </div>
                                       <!-- row -->
                                       {% if totalGlobal != 0 %}
                                       <div class="row">
                                          <div class="col-md-6">
                                          </div>
                                          <div class="col-md-6 mt-4">
                                             <div class="full white_shd thead-custom">
                                                <div class="full graph_head">
                                                   <div class="heading1 margin_0 ">
                                                      <h2>Prix total</h2>
                                                   </div>
                                                </div>
                                                <div class="full padding_infor_info">
                                                   <div class="price_table">
                                                      <div class="table-responsive">
                                                         <table class="table table-custom">
                                                            <tbody>
                                                               <tr>
                                                                  <th style="width:50%">Prix total :</th>
                                                                  <td class="totalGlobal">
                                                                     <strong>{{ totalGlobal | number_format(3, '.',
                                                                        ',') }} DT</strong>
                                                                  </td>
                                                               </tr>
                                                            </tbody>
                                                         </table>
                                                      </div>
                                                   </div>
                                                </div>
                                             </div>
                                          </div>
                                       </div>
                                       {% else %}
                                       <div class="row" style="display: none;"></div>
                                       {% endif %}
                                       {% if data is not empty and totalGlobal != 0 %}
                                       <div class="form-row justify-content-between mt-4" style=" background: #fff;
                                                      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
                                                      border-radius: 5px;
                                                      margin-top: 0;
                                                      margin-bottom: 5px;">
                                          <div class="form-group col-md-5" style="padding-left: 15px;">
                                             <label for="dateMiseCommande">Date de mise en commande :</label>
                                             <input type="date" id="dateMiseCommande" class="form-control" value="{{ "
                                                now"|date('Y-m-d') }}" readonly />
                                          </div>

                                       </div>
                                       <div class="center-buttons">
                                          <button class="btn btn-danger" id="vider-panier-btn">Vider le panier</button>

                                          <button id="confirmOrderBtn" class="btn btn-primary">Confirmer la commande</button>
                                       </div>
                                       {% endif %}
                                    </div>
                                 </div>
                                  
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
               <!-- footer -->
            </div>
            <!-- end dashboard inner -->
         </div>
      </div>
   </div>
   <style>
     .table-container {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    .form-control-xs {
        height: 24px;
        font-size: 0.8rem;
    }
    .btn-xs {
        min-width: 24px;
        height: 24px;
        font-size: 0.8rem;
        line-height: 1;
    }
    @media (max-width: 575.98px) {
        table {
            font-size: 0.8rem;
        }
        th, td {
            padding: 0.3rem;
        }
    }
</style>

   <script>
      document.addEventListener('DOMContentLoaded', function () {
         if (window.location.hash) {
            const tabId = window.location.hash.substring(1);
            const tabTrigger = document.querySelector(`.nav-link[id="${tabId}"]`);
            if (tabTrigger) {
               new bootstrap.Tab(tabTrigger).show();
            }
         }
         document.addEventListener('click', function (event) {
            if (event.target.classList.contains('minus-btn')) {
               event.preventDefault();
               console.log("minus-btn");
               const code = event.target.getAttribute('data-code');
               const inputElement = document.querySelector(`input[data-code="${code}"]`);
               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue - 1;

                  if (newValue < 0) newValue = 0;

                  inputElement.value = newValue;

                  handleQuantityChange(inputElement, false, false);
               }
            }
            else if (event.target.classList.contains('plus-btn')) {
               event.preventDefault();
               console.log("plus-btn");

               const code = event.target.getAttribute('data-code');
               const inputElement = document.querySelector(`input[data-code="${code}"]`);
               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue + 1;

                  if (newValue < 0) newValue = 0;

                  inputElement.value = newValue;

                  handleQuantityChange(inputElement, false, false);
               }
            }
            else if (event.target.classList.contains('minus-btn-promo')) {
               event.preventDefault();
               const code = event.target.getAttribute('data-code');
               const inputElement = document.querySelector(`.quantity-input-promo[data-code="${code}"]`);
               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue - 1;
                  if (newValue < 0) newValue = 0;
                  inputElement.value = newValue;
                  handleQuantityChange(inputElement, false, false);
               }
            }
            else if (event.target.classList.contains('plus-btn-promo')) {
               event.preventDefault();
               const code = event.target.getAttribute('data-code');
               const inputElement = document.querySelector(`.quantity-input-promo[data-code="${code}"]`);
               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue + 1;

                  if (newValue < 0) newValue = 0;

                  inputElement.value = newValue;

                  handleQuantityChange(inputElement, false, false);
               }

            }

            else if (event.target.classList.contains('minus-btn-gift')) {
               event.preventDefault();
               const code = event.target.getAttribute('data-code');
               const inputElement = document.querySelector(`.quantity-input-gift[data-code="${code}"]`);

               if (inputElement) {

                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue - 1;
                  if (newValue < 0) newValue = 0;
                  inputElement.value = newValue;

                  handleQuantityChange(inputElement, true, false);

               }

            }
            else if (event.target.classList.contains('plus-btn-gift')) {

               event.preventDefault();
               const code = event.target.getAttribute('data-code');
               const inputElement = document.querySelector(`.quantity-input-gift[data-code="${code}"]`);

               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue + 1;

                  inputElement.value = newValue;

                  handleQuantityChange(inputElement, true, false);

               }

            }
            else if (event.target.classList.contains('minus-qte-from-exchange')) {
               event.preventDefault();
               const code = event.target.getAttribute('data-code');

               const inputElement = document.querySelector(`.quantity-input-exchange[data-code="${code}"]`);
               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue - 1;

                  if (newValue < 0) newValue = 0;

                  inputElement.value = newValue;
                  handleQuantityChange(inputElement, false, true);

               }

            }
            else if (event.target.classList.contains('plus-qte-to-exchange')) {
               event.preventDefault();
               const code = event.target.getAttribute('data-code');

               const inputElement = document.querySelector(`.quantity-input-exchange[data-code="${code}"]`);
               if (inputElement) {
                  let currentValue = parseInt(inputElement.value.trim()) || 0;
                  let newValue = currentValue + 1;
                  if (newValue < 0) newValue = 0;
                  inputElement.value = newValue;
                  handleQuantityChange(inputElement, false, true);

               }
            }


         });
         document.querySelectorAll('.delete-item-btn').forEach(button => {
            button.addEventListener('click', function () {
               const code = this.getAttribute('data-code');
               const isGift = this.getAttribute('data-is-gift') === 'true';
               const isExchange = this.getAttribute('data-is-exchange') === 'true';
               confirmItemDeletion(code, isGift, isExchange);
            });
         });
         document.getElementById('vider-panier-btn')?.addEventListener('click', viderPanier);
         document.getElementById('vider-cadeaux-btn')?.addEventListener('click', viderCadeaux);
         document.getElementById('vider-retours-btn')?.addEventListener('click', viderRetours);

         function updatePriceTotal(code, quantity, newPrice = null) {
            price = parseFloat(document.querySelector(`.price[data-code="${code}"]`).textContent.replace(',', '.'));

            if (newPrice) {
               price = newPrice
            }

            const totalPriceElement = document.querySelector(`.total-price[data-code="${code}"]`);
            if (totalPriceElement) {
               totalPriceElement.textContent = (price * quantity).toFixed(3) + " DT";
            }
            if (isNaN(quantity)) {
               totalPriceElement.textContent = ""
            }
            console.log("totalPriceElement.textContent ", totalPriceElement.textContent);
            updateTotalGlobal();

         }
         function updateTotalGlobal() {
            let totalGlobal = 0;

            document.querySelectorAll('.total-price').forEach(function (totalPriceElement) {
               const priceTotal = parseFloat(totalPriceElement.textContent.replace(' DT', '').replace(',', '.'));
               if (!isNaN(priceTotal)) {
                  totalGlobal += priceTotal;
               }
               if (isNaN(priceTotal)) {
                  totalGlobal += 0;
               }
            });
            document.querySelector('.totalGlobal').textContent = totalGlobal.toFixed(3) + ' DT';
         }

         function viderPanier() {
            Swal.fire({
               title: 'Êtes-vous sûr ?',
               text: "Vous ne pourrez pas annuler cette action!",
               icon: 'warning',
               showCancelButton: true,
               confirmButtonColor: '#3085d6',
               cancelButtonColor: '#d33',
               confirmButtonText: 'Oui, vider le panier',
               cancelButtonText: 'Annuler'
            }).then((result) => {
               if (result.isConfirmed) {
                  $.ajax({
                     url: '{{ path("empty_cart") }}',
                     type: 'POST',
                     success: function (response) {
                        Swal.fire(
                           'Panier vidé!',
                           'Votre panier a été vidé.',
                           'success'
                        ).then(() => {
                           location.reload();
                        });
                     },
                     error: function () {
                        Swal.fire(
                           'Erreur!',
                           'Il y a eu un problème lors du vidage du panier.',
                           'error',
                        );
                     }
                  });
               }
            });
         }
         function viderCadeaux() {
            Swal.fire({
               title: 'Êtes-vous sûr ?',
               text: "Vous ne pourrez pas annuler cette action!",
               icon: 'warning',
               showCancelButton: true,
               confirmButtonColor: '#3085d6',
               cancelButtonColor: '#d33',
               confirmButtonText: 'Oui, vider les cadeaux',
               cancelButtonText: 'Annuler'
            }).then((result) => {
               if (result.isConfirmed) {
                  $.ajax({
                     url: '{{ path("empty_cadeaux") }}',
                     type: 'POST',
                     success: function (response) {
                        Swal.fire(
                           'Cadeaux retirés!',
                           'Tous les cadeaux ont été retirés de votre panier.',
                           'success'
                        ).then(() => {
                           location.reload();
                        });
                     },
                     error: function () {
                        Swal.fire(
                           'Erreur!',
                           'Il y a eu un problème lors du vidage du panier.',
                           'error',
                        );
                     }
                  });
               }
            });
         }
         function viderRetours() {
            Swal.fire({
               title: 'Êtes-vous sûr ?',
               text: "Vous ne pourrez pas annuler cette action!",
               icon: 'warning',
               showCancelButton: true,
               confirmButtonColor: '#3085d6',
               cancelButtonColor: '#d33',
               confirmButtonText: 'Oui, vider les produits',
               cancelButtonText: 'Annuler'
            }).then((result) => {
               if (result.isConfirmed) {
                  $.ajax({
                     url: '{{ path("empty_retours") }}',
                     type: 'POST',
                     success: function (response) {
                        Swal.fire(
                           'produits retirés!',
                           'Tous les cadeaux ont été retirés de votre panier.',
                           'success'
                        ).then(() => {
                           location.reload();
                        });
                     },
                     error: function () {
                        Swal.fire(
                           'Erreur!',
                           'Il y a eu un problème lors du vidage du panier.',
                           'error',
                        );
                     }
                  });
               }
            });
         }


         function confirmItemDeletion(code, isGift, isExchange) {
         /*   const activeTab = document.querySelector('.nav-link.active').getAttribute('id');*/
            var routeName = "{{ path('remove-from-cart', {'code': '__CODE__', 'isGift': '__IS_GIFT__' , 'isExchange': '__IS_EXCHANGE__' , }) }}";


            // Animation de suppression discrète
            const itemElement = document.querySelector(`[data-code="${code}"]`);
            if (itemElement) {
               itemElement.style.transition = 'opacity 0.3s';
               itemElement.style.opacity = '0';

               setTimeout(() => {
                  window.location.href = routeName
                     .replace('__CODE__', encodeURIComponent(code))
                     .replace('__IS_GIFT__', isGift ? '1' : '0')
                     .replace('__IS_EXCHANGE__', isExchange ? '1' : '0')
                     ;
               }, 300);
            } else {
               window.location.href = routeName
                  .replace('__CODE__', encodeURIComponent(code))
                  .replace('__IS_GIFT__', isGift ? '1' : '0')
                  .replace('__IS_EXCHANGE__', isExchange ? '1' : '0')
                  ;
            }
         }

         document.getElementById('confirmOrderBtn').addEventListener('click', function() {
        var dateMiseCommande = new Date(document.getElementById("dateMiseCommande").value);
        
        Swal.fire({
            title: 'Confirmer la commande',
            text: "Êtes-vous sûr de vouloir confirmer cette commande ?",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Oui, confirmer',
            cancelButtonText: 'Annuler'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '{{ path("confirm_order") }}',
                    type: 'POST',
                    data: {},
                    success: function(response) {
                        Swal.fire(
                            'Commande confirmée!',
                            'Votre commande a été enregistrée avec succès.',
                            'success'
                        ).then(() => location.reload());
                    },
                    error: function() {
                        Swal.fire(
                            'Erreur!',
                            'Un problème est survenu lors de la confirmation de la commande.',
                            'error'
                        );
                    }
                });
            }
        });
    });


         async function updateRow(row, code, quantity, nbrGratuit, selectedClient) {
            const quantityInput = row.querySelector('.quantity-input');
            if (quantityInput) {
               quantityInput.value = quantity;
            }

            const priceSpan = row.querySelector('.price');

            if (!priceSpan) {
               console.error(`Élément .price introuvable dans la ligne pour l'article ${code}`);
               return;
            }

              const quantityContainer = row.querySelector('.quantity-container');
               updatePriceTotal(code, quantity);
         }
         async function updatePriceWithDiscount(code, selectedClient, quantity, priceSpan) {
            try {
               const response = await fetch(`/verifier?code=${code}&userCode=${selectedClient}&qteArt=${quantity}`);
               if (response.ok) {
                  const data = await response.json();
                  if (data) {
                     const oldPrice = parseFloat(priceSpan.textContent.replace(' DT', ''));
                     const newPrice = data.discount;
                     const oldPriceRounded = oldPrice.toFixed(3);
                     const newPriceRounded = newPrice.toFixed(3);

                     priceSpan.innerHTML = '';
                     const oldPriceElement = document.createElement('span');
                     oldPriceElement.classList.add('old-price', 'ml-2');
                     oldPriceElement.textContent = `${oldPriceRounded} DT`;

                     if (oldPriceRounded !== newPriceRounded) {
                        const newPriceElement = document.createElement('span');
                        newPriceElement.classList.add('new-price', 'ml-2');
                        newPriceElement.setAttribute('data-code', code);
                        newPriceElement.style.color = 'red';
                        newPriceElement.textContent = `${newPriceRounded} DT`;
                        oldPriceElement.style.textDecoration = 'line-through';
                        priceSpan.appendChild(oldPriceElement);
                        priceSpan.appendChild(newPriceElement);
                        updatePriceTotal(code, quantity, newPriceRounded);
                     } else {
                        priceSpan.appendChild(oldPriceElement);
                     }
                  } else {
                     updatePriceTotal(code, quantity);
                     console.error('Aucune remise définie dans la réponse de l’API');
                  }
               } else {
                  console.error('Erreur lors de la récupération de la remise');
               }
            } catch (error) {
               console.error('Erreur de connexion à l’API', error);
            }
         }


         function handleQuantityChange(inputElement, isGift = false, isExchange = false) {
            const code = inputElement.getAttribute('data-code');
            const quantity = parseInt(inputElement.value.trim()) || 0;

            const inputs = {
               normal: document.querySelector(`input[data-code="${code}"].quantity-input`),
               promo: document.querySelector(`input[data-code="${code}"].quantity-input-promo`),
               exchange: document.querySelector(`input[data-code="${code}"].quantity-input-exchange`),
               gift: document.querySelector(`input[data-code="${code}"].quantity-input-gift`)
            };

            const quantities = Object.fromEntries(
               Object.entries(inputs).map(([key, el]) => {
                  let val = el ? parseInt(el.value.trim()) || 0 : 0;
                  if (val < 0) {
                     el.value = 0;
                     val = 0;
                  }
                  return [key, val];
               })
            );

            const isMinusAction = ['minus-btn', 'minus-promo-btn', 'minus-qte-from-exchange', 'minus-qte-from-gift']
               .some(cls => inputElement.classList.contains(cls));

            if (quantities.normal > 0 || quantities.promo > 0) {
               updateQtePanier(code, quantities.normal, quantities.promo);
            }
            else if (quantities.gift > 0 && isGift) {
               updateQtePanier(code, 0, 0, 0, quantities.gift, true);
            }
            else if (quantities.exchange > 0 && isExchange) {
               updateQtePanier(code, 0, 0, quantities.exchange, 0, false, true);
            }
            else {
               if (quantities.normal === 0 && quantities.promo === 0 && !isMinusAction) {
                  const shouldDeleteGift = isGift && quantities.gift === 0;
                  const shouldDeleteExchange = isExchange && quantities.exchange === 0;

                  if (shouldDeleteGift || shouldDeleteExchange || (!isGift && !isExchange)) {
                     confirmItemDeletion(code, isGift, isExchange);
                  }
               }
            }

            console.log(`Article ${code} mis à jour -`, quantities);
         }
function updatePanierTotal11(panier) {
    let total = 0;

   for (const key in panier) {
      if (panier.hasOwnProperty(key)) {
         const item = panier[key];
         if (item.price) {
            total += parseFloat(item.priceTotal);
         }
      }
   }

   // 🔁 Adapter ici à l’élément HTML où tu affiches le total
   const totalDisplay = document.getElementById('total-panier');
   if (totalDisplay) {
      totalDisplay.textContent = total.toFixed(3) + ' €';
   } else {
      console.warn("Élément #total-panier introuvable dans le DOM !");
   }

}


         function updateQtePanier(
            code,
            quantity = 0,
            quantityPromo = 0,
            quantityExchange = 0,
            quantityGift = 0,
            isGift = false,
            isExchange = false
         ) {
            const clientCode = $('i[data-code-client]').data('code-client');
            const row = document.querySelector(`tr[data-code="${code}"]`);

            const data = {
               code: code,
               quantity: quantity || 0,
               quantityPromo: quantityPromo || 0,
               quantityExchange: quantityExchange || 0,
               quantityGift: quantityGift || 0,
               isGift: isGift,
               isExchange: isExchange,
               clientCode: clientCode
            };

            let endpoint = '{{ path("update_panier") }}';
            console.log("quantity ", quantity);
            console.log("quantityPromo ", quantityPromo);
            console.log("quantityGift ", quantityGift);
            console.log("quantityExchange ", quantityExchange);

            $.ajax({
               url: endpoint,
               type: 'POST',
               data: data,
                success: function (response) {
                     const nbrGratuit = response.nbrGratuit || 0;
                     updateRow(row, code, quantity, nbrGratuit, clientCode);
                      console.log(response.panier);
                      updatePanierTotal11(response.panier); // Ajout ici !

                  console.log("Panier mis à jour avec succès:", response);
               },
               error: function (error) {
                  console.error("Erreur lors de la mise à jour du panier:", error);
               }
            });
         }
         document.addEventListener('focusout', function (event) {
            if (event.target && (event.target.classList.contains('quantity-input') || event.target.classList.contains('quantity-input-promo'))) {
               handleQuantityChange(event.target);
            } else if (event.target && event.target.classList.contains('quantity-input-gift')) {
               handleQuantityChange(event.target, true, false);
            } else if (event.target && event.target.classList.contains('quantity-input-exchange')) {
               handleQuantityChange(event.target, false, true);

            }
         }, true);

      });



   </script>

</body>
{% endblock %}